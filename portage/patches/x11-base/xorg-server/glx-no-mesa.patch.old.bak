diff --git a/glx/glxdricommon.c b/glx/glxdricommon.c
index 35a5396..4e2ce9b 100644
--- a/glx/glxdricommon.c
+++ b/glx/glxdricommon.c
@@ -34,7 +34,6 @@
 #include <sys/time.h>
 #include <GL/gl.h>
 #include <GL/glxtokens.h>
-#include <GL/internal/dri_interface.h>
 #include <os.h>
 #include "extinit.h"
 #include "glxserver.h"
@@ -49,45 +48,7 @@
 static const struct {
     unsigned int attrib, offset;
 } attribMap[] = {
-__ATTRIB(__DRI_ATTRIB_BUFFER_SIZE, rgbBits),
-        __ATTRIB(__DRI_ATTRIB_LEVEL, level),
-        __ATTRIB(__DRI_ATTRIB_RED_SIZE, redBits),
-        __ATTRIB(__DRI_ATTRIB_GREEN_SIZE, greenBits),
-        __ATTRIB(__DRI_ATTRIB_BLUE_SIZE, blueBits),
-        __ATTRIB(__DRI_ATTRIB_ALPHA_SIZE, alphaBits),
-        __ATTRIB(__DRI_ATTRIB_DEPTH_SIZE, depthBits),
-        __ATTRIB(__DRI_ATTRIB_STENCIL_SIZE, stencilBits),
-        __ATTRIB(__DRI_ATTRIB_ACCUM_RED_SIZE, accumRedBits),
-        __ATTRIB(__DRI_ATTRIB_ACCUM_GREEN_SIZE, accumGreenBits),
-        __ATTRIB(__DRI_ATTRIB_ACCUM_BLUE_SIZE, accumBlueBits),
-        __ATTRIB(__DRI_ATTRIB_ACCUM_ALPHA_SIZE, accumAlphaBits),
-        __ATTRIB(__DRI_ATTRIB_SAMPLE_BUFFERS, sampleBuffers),
-        __ATTRIB(__DRI_ATTRIB_SAMPLES, samples),
-        __ATTRIB(__DRI_ATTRIB_DOUBLE_BUFFER, doubleBufferMode),
-        __ATTRIB(__DRI_ATTRIB_STEREO, stereoMode),
-        __ATTRIB(__DRI_ATTRIB_AUX_BUFFERS, numAuxBuffers),
-        __ATTRIB(__DRI_ATTRIB_TRANSPARENT_TYPE, transparentPixel),
-        __ATTRIB(__DRI_ATTRIB_TRANSPARENT_INDEX_VALUE, transparentPixel),
-        __ATTRIB(__DRI_ATTRIB_TRANSPARENT_RED_VALUE, transparentRed),
-        __ATTRIB(__DRI_ATTRIB_TRANSPARENT_GREEN_VALUE, transparentGreen),
-        __ATTRIB(__DRI_ATTRIB_TRANSPARENT_BLUE_VALUE, transparentBlue),
-        __ATTRIB(__DRI_ATTRIB_TRANSPARENT_ALPHA_VALUE, transparentAlpha),
-        __ATTRIB(__DRI_ATTRIB_RED_MASK, redMask),
-        __ATTRIB(__DRI_ATTRIB_GREEN_MASK, greenMask),
-        __ATTRIB(__DRI_ATTRIB_BLUE_MASK, blueMask),
-        __ATTRIB(__DRI_ATTRIB_ALPHA_MASK, alphaMask),
-        __ATTRIB(__DRI_ATTRIB_MAX_PBUFFER_WIDTH, maxPbufferWidth),
-        __ATTRIB(__DRI_ATTRIB_MAX_PBUFFER_HEIGHT, maxPbufferHeight),
-        __ATTRIB(__DRI_ATTRIB_MAX_PBUFFER_PIXELS, maxPbufferPixels),
-        __ATTRIB(__DRI_ATTRIB_OPTIMAL_PBUFFER_WIDTH, optimalPbufferWidth),
-        __ATTRIB(__DRI_ATTRIB_OPTIMAL_PBUFFER_HEIGHT, optimalPbufferHeight),
-        __ATTRIB(__DRI_ATTRIB_SWAP_METHOD, swapMethod),
-        __ATTRIB(__DRI_ATTRIB_BIND_TO_TEXTURE_RGB, bindToTextureRgb),
-        __ATTRIB(__DRI_ATTRIB_BIND_TO_TEXTURE_RGBA, bindToTextureRgba),
-        __ATTRIB(__DRI_ATTRIB_BIND_TO_MIPMAP_TEXTURE, bindToMipmapTexture),
-        __ATTRIB(__DRI_ATTRIB_YINVERTED, yInverted),
-        __ATTRIB(__DRI_ATTRIB_FRAMEBUFFER_SRGB_CAPABLE, sRGBCapable),
-        };
+};
 
 static void
 setScalar(__GLXconfig * config, unsigned int attrib, unsigned int value)
@@ -111,8 +72,7 @@ render_type_is_pbuffer_only(unsigned renderType)
      *     GLXFBConfig must have the GLX_PBUFFER_BIT bit set and the
      *     GLX_RENDER_TYPE attribute must have the GLX_RGBA_FLOAT_BIT set."
      */
-    return !!(renderType & (__DRI_ATTRIB_UNSIGNED_FLOAT_BIT
-                            | __DRI_ATTRIB_FLOAT_BIT));
+    return !!(renderType);
 }
 
 static int
@@ -126,8 +86,8 @@ server_has_depth(int depth)
 }
 
 static __GLXconfig *
-createModeFromConfig(const __DRIcoreExtension * core,
-                     const __DRIconfig * driConfig,
+createModeFromConfig(const void * core,
+                     const void * driConfig,
                      unsigned int visualType,
                      GLboolean duplicateForComp)
 {
@@ -142,48 +102,6 @@ createModeFromConfig(const __DRIcoreExtension * core,
     config->driConfig = driConfig;
 
     i = 0;
-    while (core->indexConfigAttrib(driConfig, i++, &attrib, &value)) {
-        switch (attrib) {
-        case __DRI_ATTRIB_RENDER_TYPE:
-            if (value & __DRI_ATTRIB_RGBA_BIT)
-                renderType |= GLX_RGBA_BIT;
-            if (value & __DRI_ATTRIB_COLOR_INDEX_BIT)
-                renderType |= GLX_COLOR_INDEX_BIT;
-            if (value & __DRI_ATTRIB_FLOAT_BIT)
-                renderType |= GLX_RGBA_FLOAT_BIT_ARB;
-            if (value & __DRI_ATTRIB_UNSIGNED_FLOAT_BIT)
-                renderType |= GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT;
-            break;
-        case __DRI_ATTRIB_CONFIG_CAVEAT:
-            if (value & __DRI_ATTRIB_NON_CONFORMANT_CONFIG)
-                config->config.visualRating = GLX_NON_CONFORMANT_CONFIG;
-            else if (value & __DRI_ATTRIB_SLOW_BIT)
-                config->config.visualRating = GLX_SLOW_CONFIG;
-            else
-                config->config.visualRating = GLX_NONE;
-            break;
-        case __DRI_ATTRIB_BIND_TO_TEXTURE_TARGETS:
-            config->config.bindToTextureTargets = 0;
-            if (value & __DRI_ATTRIB_TEXTURE_1D_BIT)
-                config->config.bindToTextureTargets |= GLX_TEXTURE_1D_BIT_EXT;
-            if (value & __DRI_ATTRIB_TEXTURE_2D_BIT)
-                config->config.bindToTextureTargets |= GLX_TEXTURE_2D_BIT_EXT;
-            if (value & __DRI_ATTRIB_TEXTURE_RECTANGLE_BIT)
-                config->config.bindToTextureTargets |=
-                    GLX_TEXTURE_RECTANGLE_BIT_EXT;
-            break;
-        case __DRI_ATTRIB_SWAP_METHOD:
-            /* Workaround for broken dri drivers */
-            if (value != GLX_SWAP_UNDEFINED_OML &&
-                value != GLX_SWAP_COPY_OML &&
-                value != GLX_SWAP_EXCHANGE_OML)
-                value = GLX_SWAP_UNDEFINED_OML;
-            /* Fall through. */
-        default:
-            setScalar(&config->config, attrib, value);
-            break;
-        }
-    }
 
     if (!render_type_is_pbuffer_only(renderType))
         drawableType |= GLX_WINDOW_BIT | GLX_PIXMAP_BIT;
@@ -235,8 +153,8 @@ createModeFromConfig(const __DRIcoreExtension * core,
 }
 
 __GLXconfig *
-glxConvertConfigs(const __DRIcoreExtension * core,
-                  const __DRIconfig ** configs)
+glxConvertConfigs(const void ** core,
+                  const void *** configs)
 {
     __GLXconfig head, *tail;
     int i;
@@ -278,7 +196,7 @@ glxConvertConfigs(const __DRIcoreExtension * core,
     return head.next;
 }
 
-static const char dri_driver_path[] = DRI_DRIVER_PATH;
+static const char dri_driver_path[] = "";
 
 /* Temporary define to allow building without a dri_interface.h from
  * updated Mesa.  Some day when we don't care about Mesa that old any
@@ -297,7 +215,7 @@ glxProbeDriver(const char *driverName,
     void *driver;
     char filename[PATH_MAX];
     char *get_extensions_name;
-    const __DRIextension **extensions = NULL;
+    const void **extensions = NULL;
     const char *path = NULL;
 
     /* Search in LIBGL_DRIVERS_PATH if we're not setuid. */
@@ -341,7 +259,7 @@ glxProbeDriver(const char *driverName,
 
     if (asprintf(&get_extensions_name, "%s_%s",
                  __DRI_DRIVER_GET_EXTENSIONS, driverName) != -1) {
-        const __DRIextension **(*get_extensions)(void);
+        const void **(*get_extensions)(void);
 
         for (i = 0; i < strlen(get_extensions_name); i++) {
             /* Replace all non-alphanumeric characters with underscore,
@@ -358,26 +276,12 @@ glxProbeDriver(const char *driverName,
         free(get_extensions_name);
     }
 
-    if (!extensions)
-        extensions = dlsym(driver, __DRI_DRIVER_EXTENSIONS);
     if (extensions == NULL) {
         LogMessage(X_ERROR, "AIGLX error: %s exports no extensions (%s)\n",
                    driverName, dlerror());
         goto cleanup_failure;
     }
 
-    for (i = 0; extensions[i]; i++) {
-        if (strcmp(extensions[i]->name, coreName) == 0 &&
-            extensions[i]->version >= coreVersion) {
-            *coreExt = (void *) extensions[i];
-        }
-
-        if (strcmp(extensions[i]->name, renderName) == 0 &&
-            extensions[i]->version >= renderVersion) {
-            *renderExt = (void *) extensions[i];
-        }
-    }
-
     if (*coreExt == NULL || *renderExt == NULL) {
         LogMessage(X_ERROR,
                    "AIGLX error: %s does not export required DRI extension\n",
diff --git a/glx/glxdricommon.h b/glx/glxdricommon.h
index 6851f24..afdbc12 100644
--- a/glx/glxdricommon.h
+++ b/glx/glxdricommon.h
@@ -29,11 +29,11 @@
 typedef struct __GLXDRIconfig __GLXDRIconfig;
 struct __GLXDRIconfig {
     __GLXconfig config;
-    const __DRIconfig *driConfig;
+    const void **driConfig;
 };
 
-__GLXconfig *glxConvertConfigs(const __DRIcoreExtension * core,
-                               const __DRIconfig ** configs);
+__GLXconfig *glxConvertConfigs(const void ** core,
+                               const void *** configs);
 
 void *glxProbeDriver(const char *name,
                      void **coreExt, const char *coreName, int coreVersion,
diff --git a/glx/glxdriswrast.c b/glx/glxdriswrast.c
index c57d80d..f8f3abf 100644
--- a/glx/glxdriswrast.c
+++ b/glx/glxdriswrast.c
@@ -36,7 +36,6 @@
 #include <dlfcn.h>
 
 #include <GL/gl.h>
-#include <GL/internal/dri_interface.h>
 #include <GL/glxtokens.h>
 
 #include "scrnintstr.h"
@@ -63,24 +62,24 @@ typedef struct __GLXDRIdrawable __GLXDRIdrawable;
 
 struct __GLXDRIscreen {
     __GLXscreen base;
-    __DRIscreen *driScreen;
+    void *driScreen;
     void *driver;
 
-    const __DRIcoreExtension *core;
-    const __DRIswrastExtension *swrast;
-    const __DRIcopySubBufferExtension *copySubBuffer;
-    const __DRItexBufferExtension *texBuffer;
-    const __DRIconfig **driConfigs;
+    const void *core;
+    const void *swrast;
+    const void *copySubBuffer;
+    const void *texBuffer;
+    const void **driConfigs;
 };
 
 struct __GLXDRIcontext {
     __GLXcontext base;
-    __DRIcontext *driContext;
+    void *driContext;
 };
 
 struct __GLXDRIdrawable {
     __GLXdrawable base;
-    __DRIdrawable *driDrawable;
+    void *driDrawable;
     __GLXDRIscreen *screen;
 };
 
@@ -91,9 +90,7 @@ static void
 __glXDRIdrawableDestroy(__GLXdrawable * drawable)
 {
     __GLXDRIdrawable *private = (__GLXDRIdrawable *) drawable;
-    const __DRIcoreExtension *core = private->screen->core;
-
-    (*core->destroyDrawable) (private->driDrawable);
+    const void *core = private->screen->core;
 
     __glXDrawableRelease(drawable);
 
@@ -104,9 +101,7 @@ static GLboolean
 __glXDRIdrawableSwapBuffers(ClientPtr client, __GLXdrawable * drawable)
 {
     __GLXDRIdrawable *private = (__GLXDRIdrawable *) drawable;
-    const __DRIcoreExtension *core = private->screen->core;
-
-    (*core->swapBuffers) (private->driDrawable);
+    const void *core = private->screen->core;
 
     return TRUE;
 }
@@ -116,11 +111,8 @@ __glXDRIdrawableCopySubBuffer(__GLXdrawable * basePrivate,
                               int x, int y, int w, int h)
 {
     __GLXDRIdrawable *private = (__GLXDRIdrawable *) basePrivate;
-    const __DRIcopySubBufferExtension *copySubBuffer =
+    const void *copySubBuffer =
         private->screen->copySubBuffer;
-
-    if (copySubBuffer)
-        (*copySubBuffer->copySubBuffer) (private->driDrawable, x, y, w, h);
 }
 
 static void
@@ -129,7 +121,6 @@ __glXDRIcontextDestroy(__GLXcontext * baseContext)
     __GLXDRIcontext *context = (__GLXDRIcontext *) baseContext;
     __GLXDRIscreen *screen = (__GLXDRIscreen *) context->base.pGlxScreen;
 
-    (*screen->core->destroyContext) (context->driContext);
     __glXContextDestroy(&context->base);
     free(context);
 }
@@ -142,8 +133,7 @@ __glXDRIcontextMakeCurrent(__GLXcontext * baseContext)
     __GLXDRIdrawable *read = (__GLXDRIdrawable *) baseContext->readPriv;
     __GLXDRIscreen *screen = (__GLXDRIscreen *) context->base.pGlxScreen;
 
-    return (*screen->core->bindContext) (context->driContext,
-                                         draw->driDrawable, read->driDrawable);
+    return 0;
 }
 
 static int
@@ -152,7 +142,7 @@ __glXDRIcontextLoseCurrent(__GLXcontext * baseContext)
     __GLXDRIcontext *context = (__GLXDRIcontext *) baseContext;
     __GLXDRIscreen *screen = (__GLXDRIscreen *) context->base.pGlxScreen;
 
-    return (*screen->core->unbindContext) (context->driContext);
+    return 0;
 }
 
 static int
@@ -163,8 +153,7 @@ __glXDRIcontextCopy(__GLXcontext * baseDst, __GLXcontext * baseSrc,
     __GLXDRIcontext *src = (__GLXDRIcontext *) baseSrc;
     __GLXDRIscreen *screen = (__GLXDRIscreen *) dst->base.pGlxScreen;
 
-    return (*screen->core->copyContext) (dst->driContext,
-                                         src->driContext, mask);
+    return 0;
 }
 
 static int
@@ -172,7 +161,7 @@ __glXDRIbindTexImage(__GLXcontext * baseContext,
                      int buffer, __GLXdrawable * glxPixmap)
 {
     __GLXDRIdrawable *drawable = (__GLXDRIdrawable *) glxPixmap;
-    const __DRItexBufferExtension *texBuffer = drawable->screen->texBuffer;
+    const void *texBuffer = drawable->screen->texBuffer;
     __GLXDRIcontext *context = (__GLXDRIcontext *) baseContext;
 
     if (texBuffer == NULL)
@@ -186,8 +175,6 @@ __glXDRIbindTexImage(__GLXcontext * baseContext,
     }
     else
 #endif
-        texBuffer->setTexBuffer(context->driContext,
-                                glxPixmap->target, drawable->driDrawable);
 
     return Success;
 }
@@ -211,9 +198,9 @@ __glXDRIscreenCreateContext(__GLXscreen * baseScreen,
     __GLXDRIscreen *screen = (__GLXDRIscreen *) baseScreen;
     __GLXDRIcontext *context, *shareContext;
     __GLXDRIconfig *config = (__GLXDRIconfig *) glxConfig;
-    const __DRIconfig *driConfig = config ? config->driConfig : NULL;
-    const __DRIcoreExtension *core = screen->core;
-    __DRIcontext *driShare;
+    const void *driConfig = config ? config->driConfig : NULL;
+    const void *core = screen->core;
+    void *driShare;
 
     /* DRISWRAST won't support createContextAttribs, so these parameters will
      * never be used.
@@ -240,9 +227,7 @@ __glXDRIscreenCreateContext(__GLXscreen * baseScreen,
     context->base.bindTexImage = __glXDRIbindTexImage;
     context->base.releaseTexImage = __glXDRIreleaseTexImage;
 
-    context->driContext =
-        (*core->createNewContext) (screen->driScreen, driConfig, driShare,
-                                   context);
+    context->driContext = NULL;
 
     return &context->base;
 }
@@ -273,15 +258,13 @@ __glXDRIscreenCreateDrawable(ClientPtr client,
     private->base.swapBuffers = __glXDRIdrawableSwapBuffers;
     private->base.copySubBuffer = __glXDRIdrawableCopySubBuffer;
 
-    private->driDrawable =
-        (*driScreen->swrast->createNewDrawable) (driScreen->driScreen,
-                                                 config->driConfig, private);
+    private->driDrawable = NULL;
 
     return &private->base;
 }
 
 static void
-swrastGetDrawableInfo(__DRIdrawable * draw,
+swrastGetDrawableInfo(void * draw,
                       int *x, int *y, int *w, int *h, void *loaderPrivate)
 {
     __GLXDRIdrawable *drawable = loaderPrivate;
@@ -294,7 +277,7 @@ swrastGetDrawableInfo(__DRIdrawable * draw,
 }
 
 static void
-swrastPutImage(__DRIdrawable * draw, int op,
+swrastPutImage(void * draw, int op,
                int x, int y, int w, int h, char *data, void *loaderPrivate)
 {
     __GLXDRIdrawable *drawable = loaderPrivate;
@@ -316,7 +299,7 @@ swrastPutImage(__DRIdrawable * draw, int op,
 }
 
 static void
-swrastGetImage(__DRIdrawable * draw,
+swrastGetImage(void * draw,
                int x, int y, int w, int h, char *data, void *loaderPrivate)
 {
     __GLXDRIdrawable *drawable = loaderPrivate;
@@ -332,58 +315,27 @@ swrastGetImage(__DRIdrawable * draw,
     }
 }
 
-static const __DRIswrastLoaderExtension swrastLoaderExtension = {
-    {__DRI_SWRAST_LOADER, 1},
-    swrastGetDrawableInfo,
-    swrastPutImage,
-    swrastGetImage
-};
+static const void* swrastLoaderExtension = NULL;
 
-static const __DRIextension *loader_extensions[] = {
-    &swrastLoaderExtension.base,
-    NULL
-};
+static const void **loader_extensions = NULL;
 
 static void
 initializeExtensions(__GLXscreen * screen)
 {
-    const __DRIextension **extensions;
+    const void **extensions;
     __GLXDRIscreen *dri = (__GLXDRIscreen *)screen;
     int i;
 
     __glXEnableExtension(screen->glx_enable_bits, "GLX_MESA_copy_sub_buffer");
     __glXEnableExtension(screen->glx_enable_bits, "GLX_EXT_no_config_context");
 
-    if (dri->swrast->base.version >= 3) {
-        __glXEnableExtension(screen->glx_enable_bits,
-                             "GLX_ARB_create_context");
-        __glXEnableExtension(screen->glx_enable_bits,
-                             "GLX_ARB_create_context_no_error");
-        __glXEnableExtension(screen->glx_enable_bits,
-                             "GLX_ARB_create_context_profile");
-        __glXEnableExtension(screen->glx_enable_bits,
-                             "GLX_EXT_create_context_es_profile");
-        __glXEnableExtension(screen->glx_enable_bits,
-                             "GLX_EXT_create_context_es2_profile");
-    }
-
     /* these are harmless to enable unconditionally */
     __glXEnableExtension(screen->glx_enable_bits, "GLX_EXT_framebuffer_sRGB");
     __glXEnableExtension(screen->glx_enable_bits, "GLX_ARB_fbconfig_float");
     __glXEnableExtension(screen->glx_enable_bits, "GLX_EXT_fbconfig_packed_float");
     __glXEnableExtension(screen->glx_enable_bits, "GLX_EXT_texture_from_pixmap");
 
-    extensions = dri->core->getExtensions(dri->driScreen);
-
     for (i = 0; extensions[i]; i++) {
-        if (strcmp(extensions[i]->name, __DRI_COPY_SUB_BUFFER) == 0) {
-            dri->copySubBuffer =
-                (const __DRIcopySubBufferExtension *) extensions[i];
-        }
-
-        if (strcmp(extensions[i]->name, __DRI_TEX_BUFFER) == 0) {
-            dri->texBuffer = (const __DRItexBufferExtension *) extensions[i];
-        }
 
 #ifdef __DRI2_FLUSH_CONTROL
         if (strcmp(extensions[i]->name, __DRI2_FLUSH_CONTROL) == 0) {
@@ -402,15 +354,13 @@ __glXDRIscreenDestroy(__GLXscreen * baseScreen)
 
     __GLXDRIscreen *screen = (__GLXDRIscreen *) baseScreen;
 
-    (*screen->core->destroyScreen) (screen->driScreen);
-
     dlclose(screen->driver);
 
     __glXScreenDestroy(baseScreen);
 
     if (screen->driConfigs) {
         for (i = 0; screen->driConfigs[i] != NULL; i++)
-            free((__DRIconfig **) screen->driConfigs[i]);
+            free((void **) screen->driConfigs[i]);
         free(screen->driConfigs);
     }
 
@@ -437,17 +387,14 @@ __glXDRIscreenProbe(ScreenPtr pScreen)
 
     screen->driver = glxProbeDriver(driverName,
                                     (void **) &screen->core,
-                                    __DRI_CORE, 1,
+                                    NULL, 1,
                                     (void **) &screen->swrast,
-                                    __DRI_SWRAST, 1);
+                                    NULL, 1);
     if (screen->driver == NULL) {
         goto handle_error;
     }
 
-    screen->driScreen =
-        (*screen->swrast->createNewScreen) (pScreen->myNum,
-                                            loader_extensions,
-                                            &screen->driConfigs, screen);
+    screen->driScreen = NULL;
 
     if (screen->driScreen == NULL) {
         LogMessage(X_ERROR, "IGLX error: Calling driver entry point failed\n");
diff --git a/glx/meson.build b/glx/meson.build
index 2ec00ce..18d3f41 100644
--- a/glx/meson.build
+++ b/glx/meson.build
@@ -38,7 +38,6 @@ if build_glx
         dependencies: [
             common_dep,
             dl_dep,
-            dri_dep,
             dependency('glproto', version: '>= 1.4.17'),
             dependency('gl', version: '>= 1.2'),
         ],
diff --git a/hw/xfree86/dixmods/meson.build b/hw/xfree86/dixmods/meson.build
index a1afbe8..e4ac022 100644
--- a/hw/xfree86/dixmods/meson.build
+++ b/hw/xfree86/dixmods/meson.build
@@ -33,7 +33,7 @@ if build_glx
 
         include_directories: [ inc, xorg_inc, glx_inc ],
         c_args: [ xorg_c_args, glx_align64 ],
-        dependencies: [ common_dep, dl_dep, dri_dep ],
+        dependencies: [ common_dep, dl_dep ],
         link_whole: libxserver_glx,
         link_with: e,
 
diff --git a/include/meson.build b/include/meson.build
index 591bc25..eef9478 100644
--- a/include/meson.build
+++ b/include/meson.build
@@ -6,8 +6,6 @@ patch = version_split[2].to_int()
 # convert to the old-style 1.x.y version scheme used up to 1.20.x for backwards compatibility
 release = 1 * 10000000 + major * 100000 + minor * 1000 + patch
 
-dri_dep = dependency('dri', required: build_glx)
-
 conf_data = configuration_data()
 conf_data.set('_DIX_CONFIG_H_', '1')
 
@@ -209,9 +207,6 @@ conf_data.set('DGA', build_dga ? '1' : false)
 conf_data.set('DPMSExtension', build_dpms ? '1' : false)
 conf_data.set('DRI2', build_dri2 ? '1' : false)
 conf_data.set('DRI3', build_dri3 ? '1' : false)
-if build_glx
-    conf_data.set_quoted('DRI_DRIVER_PATH', dri_dep.get_pkgconfig_variable('dridriverdir'))
-endif
 conf_data.set('HAS_SHM', build_mitshm ? '1' : false)
 conf_data.set('MITSHM', build_mitshm ? '1' : false)
 conf_data.set('PANORAMIX', build_xinerama ? '1' : false)
